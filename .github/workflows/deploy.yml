name: Multi-Branch CI/CD Pipeline (dev/release/main)

on:
  push:
    branches: [main, dev, release]
  pull_request:
    branches: [main, dev, release]

# 环境变量
env:
  NODE_VERSION: '18'

jobs:
  # 代码质量检查 (所有分支都运行)
  quality-check:
    name: Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run type-check
        continue-on-error: false

      - name: Lint check
        run: npm run lint
        continue-on-error: false

      - name: Build check
        run: npm run build
        env:
          SKIP_ENV_VALIDATION: true

  # 部署到对应环境
  deploy:
    name: Deploy to ${{ github.ref_name }} Environment
    runs-on: ubuntu-latest
    needs: quality-check
    if: github.event_name == 'push'
    
    environment:
      name: ${{ github.ref_name == 'main' && 'production' || github.ref_name == 'release' && 'staging' || 'development' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Set Environment Variables
        run: |
          echo "Setting environment variables for ${{ github.ref_name }} branch"
          if [ "${{ github.ref_name }}" = "main" ]; then
            echo "ENV_TYPE=production" >> $GITHUB_ENV
            echo "ENV_NAME=MAIN" >> $GITHUB_ENV
            echo "DEPLOY_URL_SUFFIX=" >> $GITHUB_ENV
          elif [ "${{ github.ref_name }}" = "release" ]; then
            echo "ENV_TYPE=staging" >> $GITHUB_ENV
            echo "ENV_NAME=RELEASE" >> $GITHUB_ENV
            echo "DEPLOY_URL_SUFFIX=-release" >> $GITHUB_ENV
          else
            echo "ENV_TYPE=development" >> $GITHUB_ENV
            echo "ENV_NAME=DEV" >> $GITHUB_ENV
            echo "DEPLOY_URL_SUFFIX=-dev" >> $GITHUB_ENV
          fi

      - name: Build application
        run: npm run build
        env:
          # 根据分支设置对应的环境变量
          NEXT_PUBLIC_ENV: ${{ env.ENV_TYPE }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets[format('NEXT_PUBLIC_SUPABASE_URL_{0}', env.ENV_NAME)] }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets[format('NEXT_PUBLIC_SUPABASE_ANON_KEY_{0}', env.ENV_NAME)] }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets[format('SUPABASE_SERVICE_ROLE_KEY_{0}', env.ENV_NAME)] }}
          NEXT_PUBLIC_SITE_URL: ${{ secrets[format('NEXT_PUBLIC_SITE_URL_{0}', env.ENV_NAME)] }}

      # 部署状态显示
      - name: Deploy Status
        run: |
          echo "🚀 部署信息:"
          echo "   分支: ${{ github.ref_name }}"
          echo "   环境: ${{ env.ENV_TYPE }}"
          echo "   配置: ${{ env.ENV_NAME }}"
          echo "   构建: ✅ 成功"
          echo ""
          echo "🌐 环境对应关系:"
          echo "   • dev 分支 → 开发环境 (Development)"
          echo "   • release 分支 → 预发布环境 (Staging)"
          echo "   • main 分支 → 生产环境 (Production)"

      # TODO: 实际部署到 Vercel (配置好 Secrets 后启用)
      # - name: Deploy to Vercel
      #   uses: amondnet/vercel-action@v25
      #   with:
      #     vercel-token: ${{ secrets.VERCEL_TOKEN }}
      #     vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
      #     vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
      #     working-directory: ./
      #     vercel-args: ${{ github.ref_name == 'main' && '--prod' || '--target preview' }}

  # 通知部署结果
  notify:
    name: Notify Deployment Result
    runs-on: ubuntu-latest
    needs: [quality-check, deploy]
    if: always() && github.event_name == 'push'
    steps:
      - name: Notify Success
        if: needs.deploy.result == 'success'
        run: |
          echo "✅ ${{ github.ref_name }} 环境部署成功！"
          echo ""
          echo "📊 部署详情:"
          echo "   分支: ${{ github.ref_name }}"
          if [ "${{ github.ref_name }}" = "main" ]; then
            echo "   环境: 🌟 生产环境 (Production)"
            echo "   用途: 正式用户使用"
          elif [ "${{ github.ref_name }}" = "release" ]; then
            echo "   环境: 🧪 预发布环境 (Staging)"
            echo "   用途: 发布前最终测试"
          else
            echo "   环境: 🔧 开发环境 (Development)"
            echo "   用途: 功能开发和调试"
          fi

      - name: Notify Failure
        if: needs.deploy.result == 'failure' || needs.quality-check.result == 'failure'
        run: |
          echo "❌ ${{ github.ref_name }} 环境部署失败！"
          echo "分支: ${{ github.ref_name }}"
          echo "请检查构建日志以获取详细信息。" 