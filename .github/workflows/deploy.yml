name: Multi-Branch CI/CD Pipeline

on:
  push:
    branches: [main, dev, release]
  pull_request:
    branches: [main, dev, release]

# 环境变量
env:
  NODE_VERSION: '18'

jobs:
  # 代码质量检查 (所有分支都运行)
  quality-check:
    name: Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run type-check
        continue-on-error: false

      - name: Lint check
        run: npm run lint
        continue-on-error: false

      - name: Build check
        run: npm run build
        env:
          SKIP_ENV_VALIDATION: true

  # 部署到不同环境
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: quality-check
    if: github.event_name == 'push'
    
    environment:
      name: ${{ github.ref_name == 'main' && 'production' || github.ref_name == 'release' && 'staging' || 'development' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          # 根据环境设置不同的环境变量
          NEXT_PUBLIC_ENV: ${{ github.ref_name == 'main' && 'production' || github.ref_name == 'release' && 'staging' || 'development' }}
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      # 暂时先用简单的构建部署，不用Vercel Action避免配置复杂
      - name: Deploy Status
        run: |
          echo "🚀 部署到环境: ${{ github.ref_name == 'main' && 'production' || github.ref_name == 'release' && 'staging' || 'development' }}"
          echo "📍 分支: ${{ github.ref_name }}"
          echo "✅ 构建成功完成"

  # 通知部署结果
  notify:
    name: Notify Deployment Result
    runs-on: ubuntu-latest
    needs: [quality-check, deploy]
    if: always() && github.event_name == 'push'
    steps:
      - name: Notify Success
        if: needs.deploy.result == 'success'
        run: |
          echo "✅ 部署成功完成！"
          echo "分支: ${{ github.ref_name }}"
          echo "环境: ${{ github.ref_name == 'main' && 'production' || github.ref_name == 'release' && 'staging' || 'development' }}"

      - name: Notify Failure
        if: needs.deploy.result == 'failure' || needs.quality-check.result == 'failure'
        run: |
          echo "❌ 部署失败！"
          echo "分支: ${{ github.ref_name }}"
          echo "请检查构建日志以获取详细信息。" 